Mapping Entities to Database Tables

Annotations Used:

@Entity: Marks the class as a JPA entity, which means it is mapped to a database table.
@Table(name = "table_name"): Specifies the name of the table in the database.
@Id: Marks the primary key of the entity.
@GeneratedValue(strategy = GenerationType.IDENTITY): Specifies that the primary key value will be automatically generated by the database.
@Column(name = "column_name", nullable = false, unique = true): Maps a field to a column in the table and defines constraints like not null or unique.
@ManyToOne: Defines a many-to-one relationship with another entity.
@OneToMany: Defines a one-to-many relationship with another entity.
@JoinColumn(name = "column_name"): Specifies the foreign key column for a relationship.
Relationship Mapping:
@ManyToOne in Employee: This annotation establishes a many-to-one relationship between Employee and Department. An employee belongs to one department, but a department can have many employees.
@OneToMany in Department: This annotation establishes a one-to-many relationship between Department and Employee. The mappedBy = "department" attribute specifies that the department field in the Employee class owns the relationship.

Summary:
Employee Entity: Contains id, name, email, and department fields. It maps to the employees table in the database.
Department Entity: Contains id and name fields. It maps to the departments table in the database.
One-to-Many Relationship: Each department can have multiple employees, while each employee belongs to one department.
This setup will allow you to manage and query Employee and Department records in the database with the appropriate relationships.